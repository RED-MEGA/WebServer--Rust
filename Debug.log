warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
<

GET / HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: curl/7.81.0
Accept: */*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

>
thread 'main' panicked at src/response.rs:25:9:
EMPTY Method
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
<

GET / HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: curl/7.81.0
Accept: */*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

>
thread 'main' panicked at src/response.rs:25:9:
EMPTY Method
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:26:3
   |
25 |           panic!("EMPTY Method");
   |           ---------------------- any code following this expression is unreachable
26 | /         match get_permissions(&path) {
27 | |             Some(permissions) => {
28 | |                 if permissions.readonly() {
29 | |                     Some(Response::new(
...  |
41 | |             _ => None
42 | |         }
   | |_________^ unreachable expression
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:24:13
   |
24 |         let path = String::from(ROOT) + path;
   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 5 warnings (run `cargo fix --bin "WebServer"` to apply 3 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.32s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.29s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:45:17
   |
45 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:52:19
   |
52 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.27s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: `match` arm body without braces
  --> src/response.rs:40:9
   |
40 |             _ => panic!("EMPTY Method");None
   |               -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ these statements are not surrounded by a body
   |               |
   |               while parsing the `match` arm starting here
   |
help: surround the statements with a body
   |
40 |             _ => { panic!("EMPTY Method");None }
   |                  +                             +

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: `match` arm body without braces
  --> src/response.rs:40:9
   |
40 |             _ => panic!("EMPTY Method");None
   |               -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ these statements are not surrounded by a body
   |               |
   |               while parsing the `match` arm starting here
   |
help: surround the statements with a body
   |
40 |             _ => { panic!("EMPTY Method");None }
   |                  +                             +

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: `match` arm body without braces
  --> src/response.rs:40:9
   |
40 |             _ => panic!("EMPTY Method");None
   |               -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ these statements are not surrounded by a body
   |               |
   |               while parsing the `match` arm starting here
   |
help: surround the statements with a body
   |
40 |             _ => { panic!("EMPTY Method");None }
   |                  +                             +

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: `match` arm body without braces
  --> src/response.rs:40:9
   |
40 |             _ => panic!("EMPTY Method");None
   |               -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ these statements are not surrounded by a body
   |               |
   |               while parsing the `match` arm starting here
   |
help: surround the statements with a body
   |
40 |             _ => { panic!("EMPTY Method");None }
   |                  +                             +

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: `match` arm body without braces
  --> src/response.rs:40:9
   |
40 |             _ => panic!("EMPTY Method");None
   |               -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ these statements are not surrounded by a body
   |               |
   |               while parsing the `match` arm starting here
   |
help: surround the statements with a body
   |
40 |             _ => { panic!("EMPTY Method");None }
   |                  +                             +

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.24s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
<

GET / HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: curl/7.81.0
Accept: */*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

>
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
<

GET / HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: curl/7.81.0
Accept: */*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

>
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:40:33
   |
40 |             _ => {panic!("EMPTY Method");None}
   |                   ---------------------- ^^^^ unreachable expression
   |                   |
   |                   any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.34s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.25s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unreachable expression
  --> src/response.rs:38:48
   |
38 |                 else { panic!("EMPTY Method"); None }
   |                        ----------------------  ^^^^ unreachable expression
   |                        |
   |                        any code following this expression is unreachable
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 4 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0425]: cannot find function `prin` in this scope
  --> src/response.rs:38:24
   |
38 |                 else { prin("EMPTY Method"); None }
   |                        ^^^^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0425]: cannot find function `prin` in this scope
  --> src/response.rs:38:24
   |
38 |                 else { prin("EMPTY Method"); None }
   |                        ^^^^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.31s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
<

GET / HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: curl/7.81.0
Accept: */*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

>
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:38:24
   |
38 |                 else { ß}
   |                        ^ not found in this scope

error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:40:9
   |
40 |             _ => ß
   |                  ^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:38:24
   |
38 |                 else { ß}
   |                        ^ not found in this scope

error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:40:9
   |
40 |             _ => ß
   |                  ^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:38:24
   |
38 |                 else { ß}
   |                        ^ not found in this scope

error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:40:9
   |
40 |             _ => ß
   |                  ^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:38:24
   |
38 |                 else { ß}
   |                        ^ not found in this scope

error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:40:9
   |
40 |             _ => ß
   |                  ^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:38:24
   |
38 |                 else { ß}
   |                        ^ not found in this scope

error[E0425]: cannot find value `ß` in this scope
  --> src/response.rs:40:9
   |
40 |             _ => ß
   |                  ^ not found in this scope

For more information about this error, try `rustc --explain E0425`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.22s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

error: expected one of `,`, `:`, or `}`, found `!`
  --> src/response.rs:40:23
   |
40 |             _ => None { println!("EMPTY Method"); None }
   |                  ----          ^ expected one of `,`, `:`, or `}`
   |                  |
   |                  while parsing this struct

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

error: expected one of `,`, `:`, or `}`, found `!`
  --> src/response.rs:40:23
   |
40 |             _ => None { println!("EMPTY Method"); None }
   |                  ----          ^ expected one of `,`, `:`, or `}`
   |                  |
   |                  while parsing this struct

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `None`
  --> src/response.rs:38:22
   |
38 |                 else None
   |                      ^^^^ expected `{`
   |
help: try placing this code inside a block
   |
38 |                 else { None }
   |                      +      +

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0308]: mismatched types
  --> src/response.rs:28:21
   |
27 | /                  if permissions.readonly() {
28 | |/                     Some(Response::new(
29 | ||                         OK_HEADER.to_owned(),
30 | ||                         (|| {
31 | ||                             match to_body(&path) {
...  ||
35 | ||                         })()
36 | ||                     ))
   | ||______________________^ expected `()`, found `Option<Response>`
37 | |                  }
38 | |                  else { None }
   | |______________________________- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Option<response::Response>`
help: consider using a semicolon here
   |
36 |                     ));
   |                       +
help: consider using a semicolon here
   |
38 |                 else { None };
   |                              +
help: you might have meant to return this value
   |
28 ~                     return Some(Response::new(
29 |                         OK_HEADER.to_owned(),
 ...
35 |                         })()
36 ~                     ));
   |

error[E0308]: mismatched types
  --> src/response.rs:38:24
   |
27 | /                 if permissions.readonly() {
28 | |                     Some(Response::new(
29 | |                         OK_HEADER.to_owned(),
30 | |                         (|| {
...  |
37 | |                 }
38 | |                 else { None }
   | |________________________^^^^_- expected this to be `()`
   |                          |
   |                          expected `()`, found `Option<_>`
   |
   = note: expected unit type `()`
                   found enum `Option<_>`
help: you might have meant to return this value
   |
38 |                 else { return None; }
   |                        ++++++     +

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.29s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected `{`, found `}`
  --> src/response.rs:39:13
   |
39 |             },
   |             ^ expected `{`

warning: unused imports: `OK_HEADER`, `to_body`
 --> src/response.rs:3:74
  |
3 | use crate::{methods::*, request::Request, tools::{ROOT, get_permissions, OK_HEADER, to_body}, errors::ErrorResponse};
  |                                                                          ^^^^^^^^^  ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: `WebServer` (bin "WebServer") generated 1 warning
error: could not compile `WebServer` (bin "WebServer") due to previous error; 1 warning emitted
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.24s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.31s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
<

GET / HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: curl/7.81.0
Accept: */*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

>
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
<

GET / HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: curl/7.81.0
Accept: */*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

>
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.25s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: unexpected token: `{`
  --> src/response.rs:27:59
   |
27 |                 if permissions.readonly() || permissions. {
   |                                                           ^

error[E0308]: mismatched types
  --> src/response.rs:27:46
   |
27 |                 if permissions.readonly() || permissions. {
   |                    ----------------------    ^^^^^^^^^^^ expected `bool`, found `Permissions`
   |                    |
   |                    expected because this is `bool`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `WebServer` (bin "WebServer") due to 2 previous errors
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.32s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: expected expression, found `,`
  --> src/tools.rs:12:13
   |
12 |         Err(_) => ,
   |                -- ^ expected expression
   |                |
   |                while parsing the `match` arm starting here

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.41s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.23s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.31s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.25s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: 1 positional argument in format string, but no arguments were given
  --> src/tools.rs:12:40
   |
12 |         Err(_) => panic!("invalid file path: {}"),
   |                                              ^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: 1 positional argument in format string, but no arguments were given
  --> src/tools.rs:12:40
   |
12 |         Err(_) => panic!("invalid file path: {}"),
   |                                              ^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.36s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.24s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
warning: unused variable: `path`
  --> src/response.rs:44:17
   |
44 |     pub fn post(path: &str) -> Option<Response> {
   |                 ^^^^ help: if this is intentional, prefix it with an underscore: `_path`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `path`
  --> src/response.rs:51:19
   |
51 |     pub fn delete(path: &str) -> Option<Response> {
   |                   ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: crate `WebServer` should have a snake case name
  |
  = help: convert the identifier to snake case: `web_server`
  = note: `#[warn(non_snake_case)]` on by default

warning: `WebServer` (bin "WebServer") generated 3 warnings (run `cargo fix --bin "WebServer"` to apply 2 suggestions)
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/WebServer`
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error: this `if` expression is missing a block after the condition
  --> src/response.rs:27:17
   |
27 |                 if permissions.readonly() ||  {
   |                 ^^
   |
help: this binary operation is possibly unfinished
  --> src/response.rs:27:20
   |
27 |                 if permissions.readonly() ||  {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
   Compiling WebServer v0.1.0 (/home/rebenha/Documents/WebServer--Rust)
error[E0609]: no field `read` on type `Permissions`
  --> src/response.rs:27:58
   |
27 |                 if permissions.readonly() || permissions.read {
   |                                                          ^^^^ unknown field

For more information about this error, try `rustc --explain E0609`.
error: could not compile `WebServer` (bin "WebServer") due to previous error
2023-12-30T07:57:39.206-08:00 - WARN - Could not pass on signal to command: I/O error: No such process (os error 3)
